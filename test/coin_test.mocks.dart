// Mocks generated by Mockito 5.3.2 from annotations
// in aula_01/test/coin_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:aula_01/models/coin.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Moeda].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoeda extends _i1.Mock implements _i2.Moeda {
  MockMoeda() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set baseId(String? _baseId) => super.noSuchMethod(
        Invocation.setter(
          #baseId,
          _baseId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get sigla => (super.noSuchMethod(
        Invocation.getter(#sigla),
        returnValue: '',
      ) as String);
  @override
  set sigla(String? _sigla) => super.noSuchMethod(
        Invocation.setter(
          #sigla,
          _sigla,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get icone => (super.noSuchMethod(
        Invocation.getter(#icone),
        returnValue: '',
      ) as String);
  @override
  set icone(String? _icone) => super.noSuchMethod(
        Invocation.setter(
          #icone,
          _icone,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get nome => (super.noSuchMethod(
        Invocation.getter(#nome),
        returnValue: '',
      ) as String);
  @override
  set nome(String? _nome) => super.noSuchMethod(
        Invocation.setter(
          #nome,
          _nome,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get preco => (super.noSuchMethod(
        Invocation.getter(#preco),
        returnValue: '',
      ) as String);
  @override
  set preco(String? _preco) => super.noSuchMethod(
        Invocation.setter(
          #preco,
          _preco,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get variacao => (super.noSuchMethod(
        Invocation.getter(#variacao),
        returnValue: 0.0,
      ) as double);
  @override
  set variacao(double? _variacao) => super.noSuchMethod(
        Invocation.setter(
          #variacao,
          _variacao,
        ),
        returnValueForMissingStub: null,
      );
}
